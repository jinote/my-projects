{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "independent-marketing",
   "metadata": {},
   "source": [
    "# Homework#4 - Q1\n",
    "### CIS9655<br>Hojin Lee"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "authorized-ancient",
   "metadata": {},
   "source": [
    "### Cleaning data\n",
    "\n",
    "Use trips.csv to answer this question."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "mediterranean-resistance",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "criminal-software",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>PULocationID</th>\n",
       "      <th>DOLocationID</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "      <th>congestion_surcharge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-01-01 00:28:15</td>\n",
       "      <td>2020-01-01 00:33:03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>N</td>\n",
       "      <td>238</td>\n",
       "      <td>239</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.47</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>11.27</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-01-01 00:35:39</td>\n",
       "      <td>2020-01-01 00:43:04</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>N</td>\n",
       "      <td>239</td>\n",
       "      <td>238</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.50</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>12.30</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-01-01 00:47:41</td>\n",
       "      <td>2020-01-01 00:53:52</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>N</td>\n",
       "      <td>238</td>\n",
       "      <td>238</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>10.80</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-01-01 00:55:23</td>\n",
       "      <td>2020-01-01 01:00:14</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>1.0</td>\n",
       "      <td>N</td>\n",
       "      <td>238</td>\n",
       "      <td>151</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.36</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>8.16</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2020-01-01 00:01:58</td>\n",
       "      <td>2020-01-01 00:04:16</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>N</td>\n",
       "      <td>193</td>\n",
       "      <td>193</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>4.80</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  VendorID tpep_pickup_datetime tpep_dropoff_datetime  \\\n",
       "0           0       1.0  2020-01-01 00:28:15   2020-01-01 00:33:03   \n",
       "1           1       1.0  2020-01-01 00:35:39   2020-01-01 00:43:04   \n",
       "2           2       1.0  2020-01-01 00:47:41   2020-01-01 00:53:52   \n",
       "3           3       1.0  2020-01-01 00:55:23   2020-01-01 01:00:14   \n",
       "4           4       2.0  2020-01-01 00:01:58   2020-01-01 00:04:16   \n",
       "\n",
       "   passenger_count  trip_distance  RatecodeID store_and_fwd_flag  \\\n",
       "0              1.0            1.2         1.0                  N   \n",
       "1              1.0            1.2         1.0                  N   \n",
       "2              1.0            0.6         1.0                  N   \n",
       "3              1.0            0.8         1.0                  N   \n",
       "4              1.0            0.0         1.0                  N   \n",
       "\n",
       "   PULocationID  DOLocationID  payment_type  fare_amount  extra  mta_tax  \\\n",
       "0           238           239           1.0          6.0    3.0      0.5   \n",
       "1           239           238           1.0          7.0    3.0      0.5   \n",
       "2           238           238           1.0          6.0    3.0      0.5   \n",
       "3           238           151           1.0          5.5    0.5      0.5   \n",
       "4           193           193           2.0          3.5    0.5      0.5   \n",
       "\n",
       "   tip_amount  tolls_amount  improvement_surcharge  total_amount  \\\n",
       "0        1.47           0.0                    0.3         11.27   \n",
       "1        1.50           0.0                    0.3         12.30   \n",
       "2        1.00           0.0                    0.3         10.80   \n",
       "3        1.36           0.0                    0.3          8.16   \n",
       "4        0.00           0.0                    0.3          4.80   \n",
       "\n",
       "   congestion_surcharge  \n",
       "0                   2.5  \n",
       "1                   2.5  \n",
       "2                   2.5  \n",
       "3                   0.0  \n",
       "4                   0.0  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trip = pd.read_csv(\"/Users/hojin/Desktop/2021Fall/CIS9655-DataVisualization/Homework/HW4/trips.csv\")\n",
    "trip.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "adjustable-digest",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100000, 19)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trip.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "packed-victory",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0               0\n",
       "payment_type             0\n",
       "total_amount             0\n",
       "improvement_surcharge    0\n",
       "tolls_amount             0\n",
       "tip_amount               0\n",
       "mta_tax                  0\n",
       "extra                    0\n",
       "fare_amount              0\n",
       "DOLocationID             0\n",
       "VendorID                 0\n",
       "PULocationID             0\n",
       "store_and_fwd_flag       0\n",
       "RatecodeID               0\n",
       "trip_distance            0\n",
       "passenger_count          0\n",
       "tpep_dropoff_datetime    0\n",
       "tpep_pickup_datetime     0\n",
       "congestion_surcharge     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trip.isnull().sum().sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "eastern-ferry",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trip.duplicated().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "falling-completion",
   "metadata": {},
   "source": [
    "Dropping an unneccesay column \"Unnamed: 0\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "rapid-apple",
   "metadata": {},
   "outputs": [],
   "source": [
    "trip.drop(columns=[\"Unnamed: 0\"], inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "private-julian",
   "metadata": {},
   "source": [
    "You need to clean data following these two rules:<br>\n",
    "### 1) no amounts should be negative like tip, distance etc. (refer to data dictionary PDF file for definitions of each column if needed)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sunset-filename",
   "metadata": {},
   "source": [
    "Checking the number of negative amounts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "literary-extraction",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['VendorID', 'passenger_count', 'trip_distance', 'RatecodeID',\n",
       "       'PULocationID', 'DOLocationID', 'payment_type', 'fare_amount', 'extra',\n",
       "       'mta_tax', 'tip_amount', 'tolls_amount', 'improvement_surcharge',\n",
       "       'total_amount', 'congestion_surcharge'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trip.select_dtypes(include=['float64', 'int64']).columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "desperate-representation",
   "metadata": {},
   "outputs": [],
   "source": [
    "num_df = ['passenger_count', 'trip_distance','payment_type',\n",
    "       'fare_amount', 'extra', 'mta_tax', 'tip_amount', 'tolls_amount',\n",
    "       'improvement_surcharge', 'total_amount', 'congestion_surcharge']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fifteen-visit",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>PULocationID</th>\n",
       "      <th>DOLocationID</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "      <th>congestion_surcharge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [VendorID, tpep_pickup_datetime, tpep_dropoff_datetime, passenger_count, trip_distance, RatecodeID, store_and_fwd_flag, PULocationID, DOLocationID, payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount, improvement_surcharge, total_amount, congestion_surcharge]\n",
       "Index: []"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trip[(trip[num_df] < 0).all(axis=1)].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "sunset-glossary",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100000, 18)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trip.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "framed-dealing",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>PULocationID</th>\n",
       "      <th>DOLocationID</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "      <th>congestion_surcharge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-01-01 00:28:15</td>\n",
       "      <td>2020-01-01 00:33:03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>N</td>\n",
       "      <td>238</td>\n",
       "      <td>239</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.47</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>11.27</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-01-01 00:35:39</td>\n",
       "      <td>2020-01-01 00:43:04</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>N</td>\n",
       "      <td>239</td>\n",
       "      <td>238</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.50</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>12.30</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-01-01 00:47:41</td>\n",
       "      <td>2020-01-01 00:53:52</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>N</td>\n",
       "      <td>238</td>\n",
       "      <td>238</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>10.80</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-01-01 00:55:23</td>\n",
       "      <td>2020-01-01 01:00:14</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>1.0</td>\n",
       "      <td>N</td>\n",
       "      <td>238</td>\n",
       "      <td>151</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.36</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>8.16</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2020-01-01 00:01:58</td>\n",
       "      <td>2020-01-01 00:04:16</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>N</td>\n",
       "      <td>193</td>\n",
       "      <td>193</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>4.80</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   VendorID tpep_pickup_datetime tpep_dropoff_datetime  passenger_count  \\\n",
       "0       1.0  2020-01-01 00:28:15   2020-01-01 00:33:03              1.0   \n",
       "1       1.0  2020-01-01 00:35:39   2020-01-01 00:43:04              1.0   \n",
       "2       1.0  2020-01-01 00:47:41   2020-01-01 00:53:52              1.0   \n",
       "3       1.0  2020-01-01 00:55:23   2020-01-01 01:00:14              1.0   \n",
       "4       2.0  2020-01-01 00:01:58   2020-01-01 00:04:16              1.0   \n",
       "\n",
       "   trip_distance  RatecodeID store_and_fwd_flag  PULocationID  DOLocationID  \\\n",
       "0            1.2         1.0                  N           238           239   \n",
       "1            1.2         1.0                  N           239           238   \n",
       "2            0.6         1.0                  N           238           238   \n",
       "3            0.8         1.0                  N           238           151   \n",
       "4            0.0         1.0                  N           193           193   \n",
       "\n",
       "   payment_type  fare_amount  extra  mta_tax  tip_amount  tolls_amount  \\\n",
       "0           1.0          6.0    3.0      0.5        1.47           0.0   \n",
       "1           1.0          7.0    3.0      0.5        1.50           0.0   \n",
       "2           1.0          6.0    3.0      0.5        1.00           0.0   \n",
       "3           1.0          5.5    0.5      0.5        1.36           0.0   \n",
       "4           2.0          3.5    0.5      0.5        0.00           0.0   \n",
       "\n",
       "   improvement_surcharge  total_amount  congestion_surcharge  \n",
       "0                    0.3         11.27                   2.5  \n",
       "1                    0.3         12.30                   2.5  \n",
       "2                    0.3         10.80                   2.5  \n",
       "3                    0.3          8.16                   0.0  \n",
       "4                    0.3          4.80                   0.0  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trip = trip[(trip[num_df] >= 0).all(axis=1)]\n",
    "trip.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "uniform-opportunity",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(99570, 18)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trip.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "south-happening",
   "metadata": {},
   "source": [
    "### 2) Passenger count should not exceed six. Use Seaborne for visualization."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "single-rings",
   "metadata": {},
   "source": [
    "Checking the number of passenger_counts which exceed 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "eleven-strip",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted(trip[\"passenger_count\"].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "wanted-refrigerator",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>PULocationID</th>\n",
       "      <th>DOLocationID</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "      <th>congestion_surcharge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>33432</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2020-01-01 02:25:50</td>\n",
       "      <td>2020-01-01 02:26:47</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.21</td>\n",
       "      <td>5.0</td>\n",
       "      <td>N</td>\n",
       "      <td>140</td>\n",
       "      <td>262</td>\n",
       "      <td>2.0</td>\n",
       "      <td>88.88</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>91.68</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42270</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2020-01-01 03:01:46</td>\n",
       "      <td>2020-01-01 03:01:49</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.0</td>\n",
       "      <td>N</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.30</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.82</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>10.92</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50523</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-01-01 03:53:38</td>\n",
       "      <td>2020-01-01 03:58:57</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.0</td>\n",
       "      <td>N</td>\n",
       "      <td>231</td>\n",
       "      <td>79</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.50</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>10.30</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54229</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2020-01-01 04:35:19</td>\n",
       "      <td>2020-01-01 04:35:23</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.0</td>\n",
       "      <td>N</td>\n",
       "      <td>265</td>\n",
       "      <td>265</td>\n",
       "      <td>1.0</td>\n",
       "      <td>80.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>10.88</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>91.68</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66936</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2020-01-01 08:20:18</td>\n",
       "      <td>2020-01-01 08:20:28</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.0</td>\n",
       "      <td>N</td>\n",
       "      <td>132</td>\n",
       "      <td>264</td>\n",
       "      <td>1.0</td>\n",
       "      <td>70.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>70.30</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       VendorID tpep_pickup_datetime tpep_dropoff_datetime  passenger_count  \\\n",
       "33432       2.0  2020-01-01 02:25:50   2020-01-01 02:26:47              8.0   \n",
       "42270       2.0  2020-01-01 03:01:46   2020-01-01 03:01:49              8.0   \n",
       "50523       1.0  2020-01-01 03:53:38   2020-01-01 03:58:57              8.0   \n",
       "54229       2.0  2020-01-01 04:35:19   2020-01-01 04:35:23              8.0   \n",
       "66936       2.0  2020-01-01 08:20:18   2020-01-01 08:20:28              7.0   \n",
       "\n",
       "       trip_distance  RatecodeID store_and_fwd_flag  PULocationID  \\\n",
       "33432           1.21         5.0                  N           140   \n",
       "42270           0.00         5.0                  N            48   \n",
       "50523           1.00         1.0                  N           231   \n",
       "54229           0.00         5.0                  N           265   \n",
       "66936           0.00         5.0                  N           132   \n",
       "\n",
       "       DOLocationID  payment_type  fare_amount  extra  mta_tax  tip_amount  \\\n",
       "33432           262           2.0        88.88    0.0      0.0        0.00   \n",
       "42270            48           1.0         8.30    0.0      0.5        1.82   \n",
       "50523            79           1.0         5.50    3.0      0.5        1.00   \n",
       "54229           265           1.0        80.00    0.0      0.5       10.88   \n",
       "66936           264           1.0        70.00    0.0      0.0        0.00   \n",
       "\n",
       "       tolls_amount  improvement_surcharge  total_amount  congestion_surcharge  \n",
       "33432           0.0                    0.3         91.68                   2.5  \n",
       "42270           0.0                    0.3         10.92                   0.0  \n",
       "50523           0.0                    0.3         10.30                   2.5  \n",
       "54229           0.0                    0.3         91.68                   0.0  \n",
       "66936           0.0                    0.3         70.30                   0.0  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trip[(trip[\"passenger_count\"] > 6)].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "intimate-european",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(99570, 18)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trip.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "transparent-testing",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>PULocationID</th>\n",
       "      <th>DOLocationID</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "      <th>congestion_surcharge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-01-01 00:28:15</td>\n",
       "      <td>2020-01-01 00:33:03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>N</td>\n",
       "      <td>238</td>\n",
       "      <td>239</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.47</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>11.27</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-01-01 00:35:39</td>\n",
       "      <td>2020-01-01 00:43:04</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>N</td>\n",
       "      <td>239</td>\n",
       "      <td>238</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.50</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>12.30</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-01-01 00:47:41</td>\n",
       "      <td>2020-01-01 00:53:52</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>N</td>\n",
       "      <td>238</td>\n",
       "      <td>238</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>10.80</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-01-01 00:55:23</td>\n",
       "      <td>2020-01-01 01:00:14</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>1.0</td>\n",
       "      <td>N</td>\n",
       "      <td>238</td>\n",
       "      <td>151</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.36</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>8.16</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2020-01-01 00:01:58</td>\n",
       "      <td>2020-01-01 00:04:16</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>N</td>\n",
       "      <td>193</td>\n",
       "      <td>193</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>4.80</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   VendorID tpep_pickup_datetime tpep_dropoff_datetime  passenger_count  \\\n",
       "0       1.0  2020-01-01 00:28:15   2020-01-01 00:33:03              1.0   \n",
       "1       1.0  2020-01-01 00:35:39   2020-01-01 00:43:04              1.0   \n",
       "2       1.0  2020-01-01 00:47:41   2020-01-01 00:53:52              1.0   \n",
       "3       1.0  2020-01-01 00:55:23   2020-01-01 01:00:14              1.0   \n",
       "4       2.0  2020-01-01 00:01:58   2020-01-01 00:04:16              1.0   \n",
       "\n",
       "   trip_distance  RatecodeID store_and_fwd_flag  PULocationID  DOLocationID  \\\n",
       "0            1.2         1.0                  N           238           239   \n",
       "1            1.2         1.0                  N           239           238   \n",
       "2            0.6         1.0                  N           238           238   \n",
       "3            0.8         1.0                  N           238           151   \n",
       "4            0.0         1.0                  N           193           193   \n",
       "\n",
       "   payment_type  fare_amount  extra  mta_tax  tip_amount  tolls_amount  \\\n",
       "0           1.0          6.0    3.0      0.5        1.47           0.0   \n",
       "1           1.0          7.0    3.0      0.5        1.50           0.0   \n",
       "2           1.0          6.0    3.0      0.5        1.00           0.0   \n",
       "3           1.0          5.5    0.5      0.5        1.36           0.0   \n",
       "4           2.0          3.5    0.5      0.5        0.00           0.0   \n",
       "\n",
       "   improvement_surcharge  total_amount  congestion_surcharge  \n",
       "0                    0.3         11.27                   2.5  \n",
       "1                    0.3         12.30                   2.5  \n",
       "2                    0.3         10.80                   2.5  \n",
       "3                    0.3          8.16                   0.0  \n",
       "4                    0.3          4.80                   0.0  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trip = trip[trip[\"passenger_count\"] <= 6]\n",
    "trip.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "stuffed-watts",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted(trip[\"passenger_count\"].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "owned-purchase",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(99563, 18)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trip.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "competent-chance",
   "metadata": {},
   "source": [
    "Use Seaborne for visualization.\n",
    "### a. Show the distribution of pick up and drop off hours of the day divided into three time zones, <br>- late night (22:00 to 04:00),<br> - morning (04:00 to 10:00) <br>- midday (10:00 to 16:00). 15 points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "armed-orlando",
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime\n",
    "from datetime import datetime\n",
    "from datetime import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ordinary-bolivia",
   "metadata": {},
   "outputs": [],
   "source": [
    "trip[\"tpep_pickup_datetime\"] = pd.to_datetime(trip[\"tpep_pickup_datetime\"])\n",
    "trip[\"tpep_dropoff_datetime\"] = pd.to_datetime(trip[\"tpep_dropoff_datetime\"])\n",
    "trip[\"pickup_hr\"] = trip[\"tpep_pickup_datetime\"].dt.hour \n",
    "trip[\"dropoff_hr\"] = trip[\"tpep_dropoff_datetime\"].dt.hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "liquid-interest",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>PULocationID</th>\n",
       "      <th>DOLocationID</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "      <th>congestion_surcharge</th>\n",
       "      <th>pickup_hr</th>\n",
       "      <th>dropoff_hr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-01-01 00:28:15</td>\n",
       "      <td>2020-01-01 00:33:03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>N</td>\n",
       "      <td>238</td>\n",
       "      <td>239</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.47</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>11.27</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-01-01 00:35:39</td>\n",
       "      <td>2020-01-01 00:43:04</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>N</td>\n",
       "      <td>239</td>\n",
       "      <td>238</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.50</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>12.30</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-01-01 00:47:41</td>\n",
       "      <td>2020-01-01 00:53:52</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>N</td>\n",
       "      <td>238</td>\n",
       "      <td>238</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>10.80</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-01-01 00:55:23</td>\n",
       "      <td>2020-01-01 01:00:14</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>1.0</td>\n",
       "      <td>N</td>\n",
       "      <td>238</td>\n",
       "      <td>151</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.36</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>8.16</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2020-01-01 00:01:58</td>\n",
       "      <td>2020-01-01 00:04:16</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>N</td>\n",
       "      <td>193</td>\n",
       "      <td>193</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>4.80</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   VendorID tpep_pickup_datetime tpep_dropoff_datetime  passenger_count  \\\n",
       "0       1.0  2020-01-01 00:28:15   2020-01-01 00:33:03              1.0   \n",
       "1       1.0  2020-01-01 00:35:39   2020-01-01 00:43:04              1.0   \n",
       "2       1.0  2020-01-01 00:47:41   2020-01-01 00:53:52              1.0   \n",
       "3       1.0  2020-01-01 00:55:23   2020-01-01 01:00:14              1.0   \n",
       "4       2.0  2020-01-01 00:01:58   2020-01-01 00:04:16              1.0   \n",
       "\n",
       "   trip_distance  RatecodeID store_and_fwd_flag  PULocationID  DOLocationID  \\\n",
       "0            1.2         1.0                  N           238           239   \n",
       "1            1.2         1.0                  N           239           238   \n",
       "2            0.6         1.0                  N           238           238   \n",
       "3            0.8         1.0                  N           238           151   \n",
       "4            0.0         1.0                  N           193           193   \n",
       "\n",
       "   payment_type  fare_amount  extra  mta_tax  tip_amount  tolls_amount  \\\n",
       "0           1.0          6.0    3.0      0.5        1.47           0.0   \n",
       "1           1.0          7.0    3.0      0.5        1.50           0.0   \n",
       "2           1.0          6.0    3.0      0.5        1.00           0.0   \n",
       "3           1.0          5.5    0.5      0.5        1.36           0.0   \n",
       "4           2.0          3.5    0.5      0.5        0.00           0.0   \n",
       "\n",
       "   improvement_surcharge  total_amount  congestion_surcharge  pickup_hr  \\\n",
       "0                    0.3         11.27                   2.5          0   \n",
       "1                    0.3         12.30                   2.5          0   \n",
       "2                    0.3         10.80                   2.5          0   \n",
       "3                    0.3          8.16                   0.0          0   \n",
       "4                    0.3          4.80                   0.0          0   \n",
       "\n",
       "   dropoff_hr  \n",
       "0           0  \n",
       "1           0  \n",
       "2           0  \n",
       "3           1  \n",
       "4           0  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trip.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "instrumental-birth",
   "metadata": {},
   "outputs": [],
   "source": [
    "trip[\"pickup_hr\"] = trip[\"tpep_pickup_datetime\"].dt.hour \n",
    "trip[\"dropoff_hr\"] = trip[\"tpep_dropoff_datetime\"].dt.hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "ordinary-reserve",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "figure, ax = plt.subplots(nrows=1, ncols=2, figsize=(12,5))\n",
    "sns.histplot(trip, x=trip[\"pickup_hr\"], color = \"red\", bins = 20, ax=ax[0])\n",
    "sns.histplot(trip, x=trip[\"dropoff_hr\"], color=\"blue\", bins = 20, ax=ax[1])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "regular-chorus",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "approved-toolbox",
   "metadata": {},
   "source": [
    "### a1) late night (22:00 to 04:00)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "dried-commission",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 2, 3, 4, 22, 23]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pickup_late = trip[(trip[\"pickup_hr\"] >= 22) | (trip[\"pickup_hr\"] <= 4)]\n",
    "sorted(pickup_late.pickup_hr.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "defined-spokesman",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 2, 3, 4, 22, 23]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dropoff_late = trip[(trip[\"dropoff_hr\"] >= 22) | (trip[\"dropoff_hr\"] <= 4)]\n",
    "sorted(dropoff_late.dropoff_hr.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "modular-nursing",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "figure, ax = plt.subplots(nrows=1, ncols=2, figsize=(12,5))\n",
    "sns.histplot(pickup_late, x=\"pickup_hr\", ax=ax[0], bins=28, color = \"green\")\n",
    "ax[0].set_title(\"Late Night Pick up (22:00 to 04:00)\", fontsize=13)\n",
    "sns.histplot(dropoff_late, x=\"dropoff_hr\", ax=ax[1], bins=28, color = \"orange\")\n",
    "ax[1].set_title(\"Late Night Drop off (22:00 to 04:00)\", fontsize=13)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "collected-samoa",
   "metadata": {},
   "source": [
    "### a2) morning (04:00 to 10:00)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "serious-development",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[4, 5, 6, 7, 8, 9, 10]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pickup_morning = trip[(trip[\"pickup_hr\"] >= 4) & (trip[\"pickup_hr\"] <= 10)]\n",
    "sorted(pickup_morning.pickup_hr.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "expressed-teacher",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[4, 5, 6, 7, 8, 9, 10]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dropoff_morning = trip[(trip[\"dropoff_hr\"] >= 4) & (trip[\"dropoff_hr\"] <= 10)]\n",
    "sorted(dropoff_morning.dropoff_hr.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "novel-radiation",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "figure, ax = plt.subplots(nrows=1, ncols=2, figsize=(12,5))\n",
    "sns.histplot(pickup_morning, x=\"pickup_hr\", bins=7, ax=ax[0], color = \"green\")\n",
    "ax[0].set_title(\"Morning Pick up (04:00 to 10:00)\", fontsize=13)\n",
    "sns.histplot(dropoff_morning, x=\"dropoff_hr\", bins=7, ax=ax[1], color = \"orange\")\n",
    "ax[1].set_title(\"Morning Drop off (04:00 to 10:00)\", fontsize=13)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "recognized-investigation",
   "metadata": {},
   "source": [
    "### a3) midday (10:00 to 16:00)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "optimum-flexibility",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[10, 11, 12, 13, 14, 15, 16]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pickup_mid = trip[(trip[\"pickup_hr\"] >= 10) & (trip[\"pickup_hr\"] <= 16)]\n",
    "sorted(pickup_mid.pickup_hr.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "awful-musical",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[10, 11, 12, 13, 14, 15, 16]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dropoff_mid = trip[(trip[\"dropoff_hr\"] >= 10) & (trip[\"dropoff_hr\"] <= 16)]\n",
    "sorted(dropoff_mid.dropoff_hr.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "unexpected-sarah",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "figure, ax = plt.subplots(nrows=1, ncols=2, figsize=(12,5))\n",
    "sns.histplot(pickup_mid, x=\"pickup_hr\", bins=7, ax=ax[0], color = \"green\")\n",
    "ax[0].set_title(\"Midday Pick up (10:00 to 16:00)\", fontsize=13)\n",
    "sns.histplot(dropoff_mid, x=\"dropoff_hr\", bins=7, ax=ax[1], color = \"orange\")\n",
    "ax[1].set_title(\"Midday Drop off (10:00 to 16:00)\", fontsize=13)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "athletic-workstation",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "sharing-budget",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "rotary-packing",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "exotic-restaurant",
   "metadata": {},
   "source": [
    "### b. Create a pie chart for different passenger counts showing number of trips for each. 10 points<br>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "honest-payday",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>Number of Trips</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1563</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>63726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.0</td>\n",
       "      <td>19341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.0</td>\n",
       "      <td>5589</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.0</td>\n",
       "      <td>3308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6.0</td>\n",
       "      <td>2135</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   passenger_count  Number of Trips\n",
       "0              0.0             1563\n",
       "1              1.0            63726\n",
       "2              2.0            19341\n",
       "3              3.0             5589\n",
       "4              4.0             3308\n",
       "5              5.0             3901\n",
       "6              6.0             2135"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "passenger_df = trip.groupby('passenger_count')['VendorID'].count().reset_index()\n",
    "passenger_df.rename(columns={'VendorID':'Number of Trips'}, inplace=True)\n",
    "passenger_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "fleet-sponsorship",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted(passenger_df[\"passenger_count\"].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "square-verification",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "colors = sns.color_palette(\"Set2\",7)\n",
    "\n",
    "total = sum(passenger_df[\"Number of Trips\"])\n",
    "\n",
    "plt.figure(figsize=(8,8))\n",
    "plt.pie(passenger_df[\"Number of Trips\"],\n",
    "       labels = passenger_df[\"passenger_count\"],\n",
    "        autopct = lambda p: '{:.0f}'.format(p * total / 100),\n",
    "        colors=colors)\n",
    "plt.legend(loc=\"upper right\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "stock-brother",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "vital-skiing",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "blond-rings",
   "metadata": {},
   "source": [
    "### c. Show a scatter plot of trip distance vs fare amount. 10 points<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "respected-lambda",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(7,7))\n",
    "sns.scatterplot(data=trip, y=\"trip_distance\", x=\"fare_amount\", color = \"purple\")\n",
    "plt.title(\"Trip Distance VS Fare Amount\", size=14)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "spatial-wings",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
